apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    #alb.ingress.kubernetes.io/tags: Environment=<environment-name>,Owner=<your-name>

    # For each `listen-ports` object defined an ALB lister is created
    # For each listener created the rules defined in `spec` apply with some basic caveats
    # SSL redirect rule is applied only to the HTTP listener.  Cognito authentication rule
    # is applied to the HTTPS listener
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    # Detailed redirect settings
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    # Authentication type must be cognito
    alb.ingress.kubernetes.io/auth-type: cognito
    # Required parameter for ALB/Cognito integration
    alb.ingress.kubernetes.io/auth-scope: openid
    # Session timeout on authentication credentials
    alb.ingress.kubernetes.io/auth-session-timeout: '3600'
    # Session cookie name
    alb.ingress.kubernetes.io/auth-session-cookie: AWSELBAuthSessionCookie
    # Action to take when a request is not authenticated
    alb.ingress.kubernetes.io/auth-on-unauthenticated-request: authenticate
    # Cognito parameters required for creation of authentication rules
    # The subdomain name only is sufficient for `UserPoolDomain`
    # e.g. if `FQDN=app.auth.ap-northeast-1.amazoncognito.com` then `UserPoolDomain=app`
    alb.ingress.kubernetes.io/auth-idp-cognito: '{"UserPoolArn": "arn:aws:cognito-idp:eu-west-1:290203874812:userpool/eu-west-1_HcsdTUGJ0","UserPoolClientId":"45l9ur3djufl6i8vkbd776k9nv","UserPoolDomain":"muraki01.auth.eu-west-1.amazoncognito.com"}'
    # ACM certificate ARN for your SSL domain
    #alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:<region>:<account-id>:certificate/<certificate-id>

spec:
  rules:
    - http:
        paths:
          - path: /*
            backend:
              serviceName: service
              servicePort: 80
